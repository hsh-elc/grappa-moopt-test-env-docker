# Service part
service:

  # Grappa measures the time taken to grade all task-specific
  # submissions and returns that value to the client for every
  # subsequent task-specific grading request. Since there is
  # no measured time data available on system startup, the
  # default_estimated_grading_seconds property sets the initial
  # value for every submission request. After the first submission
  # has been graded and the time measured, every subsequent
  # task-specific submission request will receive the actual
  # estimated time remaining for a task-specific submission to
  # finish its grade process.
  default_estimated_grading_seconds: 20
  
  # A problem's estimated grading time is based on the arithmetic mean of previously 
  # measured grading times that are kept in a list; limiting that list's size to a 
  # maximum controls how many of these most recent (previous) grading times are taken 
  # into account when estimating a problem's new grading time
  prev_grading_seconds_max_list_size: 10
  
  # Sets the logging level of the web service
  # (possible values: OFF, ERROR, WARN, INFO, DEBUG, TRACE and ALL)
  logging_level: "DEBUG"
  
  # Grading requests to Grappa can be either synchronous or
  # asynchronous. Synchronous requests will block the calling function
  # while asynchronous requests will return immediately for the caller
  # to retrieve the grading result at a later time.
  # This property sets the wait timeout for Grappa for synchronous
  # submission requests by clients.
  synchronous_submission_timeout_seconds: 600 # 10 minutes

  # The class path and name to the module used to setup a vagrant
  # environment for the web service
  # Note: Grappa does not currently use these properties.
  # They can be left out for now.
  # default_grading_environment_setup_class_path: "path to jar"
  # default_grading_environment_setup_class_name: "de.hsh.grappa.VagrantHostSetup"

# Client LMS authentification
# All REST API calls by a client to the web service must be authorized
lms:
  - name: "test@HsH"
    id: "test"
    password_hash: "test"
    # expected internal error type always merged test feedback 
    # (temporary switch, default: false)
    eietamtf: false

# Parent directory of all graders running within host's JVM. 
# Below this directory there is one subdirectory per backend-plugin.
graders_home: "/usr/local/graders"

# The graders part
# Every grader definition here represents a grader pool
# with a specified number of grader instances in that pool.    
graders:

  # Submission requests must supply the target grader pool's ID.
  - id:
      name: "DummyGrader"
      version: "1.0"

    # A user-friendly name for this grader pool
    display_name: "DummyGrader" # user friendly name

    # optional, a list of programming languages
    # that are supported by the particular grader
    # for possible values see: Appendix B of the ProFormA Format Whitepaper
    # (https://github.com/ProFormA/proformaxml/blob/master/Whitepaper.md#appendix-b-list-of-programming-languages)
    proglangs: ["prolog", "cpp"]

    # A grader pool may be enabled or disabled. Disabled grader pools
    # are ignored and not utilized by Grappa. Neither do they show up
    # in the result when a client polls for available grader types.
    enabled: true  # enable or disable grader

    # The timeout in seconds dictates the maximum time for a submission
    # to be graded after which the grading process is forcibly
    # interrupted. Timed out submissions are considered failed
    # submissions, either due to the student's code or an internal
    # server problem.
    timeout_seconds: 60

    # Sets the number of maximum grader instances in this grader pool
    concurrent_grading_processes: 5

    # optional, if different from service setting above
    #logging_level: "WARN"

    # optional, provides the LMS with information which
    # result specifications should be used as default values
    # when requesting the result specifications from the grader
    result_spec:
      format: "xml" # possible values: "zip", "xml"
      structure: "separate-test-feedback" # possible values: "separate-test-feedback", "merged-test-feedback"
      teacher_feedback_level: "debug" # possible values: "debug", "info", "warn", "error"
      student_feedback_level: "info" # possible values: "debug", "info", "warn", "error"

    # optional, specifies whether the stacktrace of an internal error should be included in the response or not
    # default value is false
    show_stacktrace: true

    # Name of the subdirectory below 'graders_home', where jars 
    # of the grader backendplugin are installed.
    # Mandatory.
    #subdir: "dummygrader" 
    
    # Dot-style java-class fully qualified name of the graderbackend plugin.
    # This class is expected in classpath, in 'host_jvm_bp.plugin_jar_name', 
    # or optionally in {graders_home}/{subdir}/graderBP.jar.
    # Mandatory.
    #backend_plugin_classname: "de.hsh.grappa.backendplugin.dummygrader.DummyGrader"
    
    # Semicolon separated relative path(es) below {graders_home}/{subdir} 
    # to files or directories that are to be loaded to the classpath.
    # The file {graders_home}/{subdir}/graderBP.jar does not need to be mentioned here, 
    # since it is loaded by default.
    # Optional. Default: (empty string)
    #relative_classpathes: ""
    
    # Semicolon separated file extensions that grappa should load to the classpath.
    # Optional. Default value: .jar
    #fileextensions: ".jar"
    
    # Grader-specific properties
    # Properties (key/value pairs only) set here, will be forwarded to backend plugin 
    # before each grading process.
    # (These should be default values that may be overwritten by LMS in future.)
    # Optional.
    grader_plugin_defaults:
        my.property.1: "value 1"
        another.property: 42
      
    # Decides whether the grader will be run in host's JVM or within a docker-container.
    # Mandatory. Possible values: host_jvm_bp | docker_jvm_bp 
    #operating_mode: host_jvm_bp
    operating_mode: docker_jvm_bp

    #actually not supported for host_jvm
    #optional: defautl host-settings (host-mashine)
    file_encoding: UTF-8
    user_language: de   # en
    user_country: DE  # US

    # Additional preferences for running grader in host's JVM only
    # Optional.
    #host_jvm_bp:
        # Semicolon separated absolute path(es) to files or directories that are to be 
        # loaded to the classpath when running on the host's JVM.
        # Optional. Default: (empty string)
        # hostonly_classpathes: "/usr/local/whatever/lib.jar"
        
        # Name of jar-file of the backend plugin below {graders_home}/{subdir}.
        # Optional. Default value: graderBP.jar
        #plugin_jar_name: "DummyGraderGrappaV2.jar"

    # Mandatory if 'operating_mode' was set to 'docker_jvm_bp'
    docker_jvm_bp:        
        # The Name of the docker image to create a container from. 
        # If image is not found locally, docker will search for remote one.
        # For registries different from local or DockerHub the general design of this name
        # is: registry:port/repo/image:tag
        # Mandatory.
        image_name: "ghcr.io/hsh-elc/grappa-backend-dummygrader:latest"
        #image_name: "grappa-backend-dummygrader"
        
        # Username with readonly-access and password or PAT to retrieve a private image.
        # Optional.
        # Currently not used.
        #username:
        #password_pat:

  - id:
      name: "GraFlap"
      version: "1.0"
    display_name: "GraFlap 1.0 via Docker" # user friendly name
    enabled: true  # enable or disable grader
    proglangs: ["plaintext", "GraFLAP"]
    timeout_seconds: 60
    # concurrent_grading_processes sets the number of max grader instances in a grader pool
    concurrent_grading_processes: 5
    #logging_level: "WARN"    # optional, if different from service setting above

    # optional, provides the LMS with information which
    # result specifications should be used as default values
    # when requesting the result specifications from the grader
    result_spec:
      format: "" # possible values: "zip", "xml"
      structure: "separate-test-feedback" # possible values: "separate-test-feedback", "merged-test-feedback"
      teacher_feedback_level: "debug" # possible values: "debug", "info", "warn", "error"
      student_feedback_level: "info" # possible values: "debug", "info", "warn", "error"

    # optional, specifies whether the stacktrace of an internal error should be included in the response or not
    # default value is false
    show_stacktrace: true

    # Name of the subdirectory below 'graders_home', where jars 
    # of the grader backendplugin are installed.
    # Mandatory.
    #subdir: "graflap" 
    # Dot-style java-class fully qualified name of the graderbackend plugin.
    # This class is expected in classpath, in 'host_jvm_bp.plugin_jar_name', 
    # or optionally in {graders_home}/{subdir}/graderBP.jar.
    # Mandatory.
    #backend_plugin_classname: "de.hsh.grappa.backendplugin.graflap.GraFlapPlugin"
    # Semicolon separated relative path(es) below {graders_home}/{subdir} 
    # to files or directories that are to be loaded to the classpath.
    # The file {graders_home}/{subdir}/graderBP.jar does not need to be mentioned here, 
    # since it is loaded by default.
    # Optional. Default: (empty string)
    #relative_classpathes: ""
    # Semicolon separated file extensions that grappa should load to the classpath.
    # Optional. Default value: .jar
    #fileextensions: ".jar"
    
    # Grader-specific properties
    # Properties (key/value pairs only) set here, will be forwarded to backend plugin 
    # before each grading process.
    # (These should be default values that may be overwritten by LMS in future.)
    # Optional.
    grader_plugin_defaults:
        my.property.1: "value 1"
        another.property: 42
      
    # Decides whether the grader will be run in host's JVM or within a docker-container.
    # Mandatory. Possible values: host_jvm_bp | docker_jvm_bp 
    #operating_mode: host_jvm_bp
    operating_mode: docker_jvm_bp

    # Additional preferences for running grader in host's JVM only
    # Optional.
    #host_jvm_bp:
        # Semicolon separated absolute path(es) to files or directories that are to be 
        # loaded to the classpath when running on the host's JVM.
        # Optional. Default: (empty string)
        # hostonly_classpathes: "/usr/local/whatever/lib.jar"
        
        # Name of jar-file of the backend plugin below {graders_home}/{subdir}.
        # Optional. Default value: graderBP.jar
        #plugin_jar_name: "grappa-backendplugin-graflap-0.1-jar-with-dependencies.jar"

    # Mandatory if 'operating_mode' was set to 'docker_jvm_bp'
    docker_jvm_bp:        
        # The Name of the docker image to create a container from. 
        # If image is not found locally, docker will search for remote one.
        # For registries different from local or DockerHub the general design of this name
        # is: registry:port/repo/image:tag
        # Mandatory.
        #image_name: "grappa-backend-graflap"
        image_name: "ghcr.io/hsh-elc/grappa-backendplugin-graflap:latest"
        #image_name: "ghcr.io/kiliandangendorf/grappa-backendplugin-graflap:latest"
        # Username with readonly-access and password or PAT to retrieve a private image.
        # Optional.
        # Currently not used.
        #username:
        #password_pat:
        
  - id:
      name: "Graja"
      version: "2.2"
    display_name: "Graja 2.2 via Docker" # user friendly name
    enabled: true  # enable or disable grader
    proglangs: ["java"]
    timeout_seconds: 60
    # concurrent_grading_processes sets the number of max grader instances in a grader pool
    concurrent_grading_processes: 5
    #logging_level: "WARN"    # optional, if different from service setting above

    # optional, provides the LMS with information which
    # result specifications should be used as default values
    # when requesting the result specifications from the grader
    result_spec:
      format: "" # possible values: "zip", "xml"
      structure: "separate-test-feedback" # possible values: "separate-test-feedback", "merged-test-feedback"
      teacher_feedback_level: "debug" # possible values: "debug", "info", "warn", "error"
      student_feedback_level: "info" # possible values: "debug", "info", "warn", "error"

    # optional, specifies whether the stacktrace of an internal error should be included in the response or not
    # default value is false
    show_stacktrace: true

    # Name of the subdirectory below 'graders_home', where jars 
    # of the grader backendplugin are installed.
    # Mandatory.
    subdir: "TODO" 
    # Dot-style java-class fully qualified name of the graderbackend plugin.
    # This class is expected in classpath, in 'host_jvm_bp.plugin_jar_name', 
    # or optionally in {graders_home}/{subdir}/graderBP.jar.
    # Mandatory.
    backend_plugin_classname: "de.hsh.grappa.backendplugin.graja.GrajaPlugin"
    # Semicolon separated relative path(es) below {graders_home}/{subdir} 
    # to files or directories that are to be loaded to the classpath.
    # The file {graders_home}/{subdir}/graderBP.jar does not need to be mentioned here, 
    # since it is loaded by default.
    # Optional. Default: (empty string)
    relative_classpathes: "Graja"
    # Semicolon separated file extensions that grappa should load to the classpath.
    # Optional. Default value: .jar
    fileextensions: ".jar"
    
    # Grader-specific properties
    # Properties (key/value pairs only) set here, will be forwarded to backend plugin 
    # before each grading process.
    # (These should be default values that may be overwritten by LMS in future.)
    # Optional.
    grader_plugin_defaults:
        # Example properties file for Grappa Backend plugin for Graja
        # Some of these switches should be set by the LMS or Grappa.
        resultSpec.structure.default: separate-test-feedback
        resultSpec.studentFeedbackLevel.default: info
        resultSpec.teacherFeedbackLevel.default: info

        debug.keepStarterWorkspace: true
        debug.keepBackendWorkspace: true
        # debug.overrideMaxRuntimeSecondsWallclockTime: 300
        # debug.javaSecurityDebug: 
        # debug.agentlibJdwp: 

        # maxSubmissionUnpackSizeKib:
        useJavascript: true
        includeScores: false
        includeConsoleOutput: true
      
    # Decides whether the grader will be run in host's JVM or within a docker-container.
    # Mandatory. Possible values: host_jvm_bp | docker_jvm_bp 
    #operating_mode: host_jvm_bp
    operating_mode: docker_jvm_bp

    # Additional preferences for running grader in host's JVM only
    # Optional.
    host_jvm_bp:
        # Semicolon separated absolute path(es) to files or directories that are to be 
        # loaded to the classpath when running on the host's JVM.
        # Optional. Default: (empty string)
        # hostonly_classpathes: "/usr/local/whatever/lib.jar"
        
        # Name of jar-file of the backend plugin below {graders_home}/{subdir}.
        # Optional. Default value: graderBP.jar
        plugin_jar_name: "grajaplugin.jar"

        # ! NOTE: Graja currently not functionable on host_jvm_bp !

    # Mandatory if 'operating_mode' was set to 'docker_jvm_bp'
    docker_jvm_bp:        
        # The Name of the docker image to create a container from. 
        # If image is not found locally, docker will search for remote one.
        # For registries different from local or DockerHub the general design of this name
        # is: registry:port/repo/image:tag
        # Mandatory.
        image_name: "grappa-backend-graja-2.2"
        # Username with readonly-access and password or PAT to retrieve a private image.
        # Optional.
        # Currently not used.
        #username:
        #password_pat:

  - id:
      name: "Asqlg"
      version: "2.0"
    display_name: "Asqlg 2.0 via Docker" # user friendly name
    enabled: true  # enable or disable grader
    proglangs: ["sql"]
    timeout_seconds: 600
    # concurrent_grading_processes sets the number of max grader instances in a grader pool
    concurrent_grading_processes: 5
    #logging_level: "WARN"    # optional, if different from service setting above

    # optional, provides the LMS with information which
    # result specifications should be used as default values
    # when requesting the result specifications from the grader
    result_spec:
      format: "" # possible values: "zip", "xml"
      structure: "separate-test-feedback" # possible values: "separate-test-feedback", "merged-test-feedback"
      teacher_feedback_level: "debug" # possible values: "debug", "info", "warn", "error"
      student_feedback_level: "info" # possible values: "debug", "info", "warn", "error"

    # optional, specifies whether the stacktrace of an internal error should be included in the response or not
    # default value is false
    show_stacktrace: true

    # Name of the subdirectory below 'graders_home', where jars 
    # of the grader backendplugin are installed.
    # Mandatory.
    subdir: "TODO" 
    # Dot-style java-class fully qualified name of the graderbackend plugin.
    # This class is expected in classpath, in 'host_jvm_bp.plugin_jar_name', 
    # or optionally in {graders_home}/{subdir}/graderBP.jar.
    # Mandatory.
    backend_plugin_classname: "de.hsh.grappa.AsqlgBackendPlugin"
    # Semicolon separated relative path(es) below {graders_home}/{subdir} 
    # to files or directories that are to be loaded to the classpath.
    # The file {graders_home}/{subdir}/graderBP.jar does not need to be mentioned here, 
    # since it is loaded by default.
    # Optional. Default: (empty string)
    relative_classpathes: ""
    # Semicolon separated file extensions that grappa should load to the classpath.
    # Optional. Default value: .jar
    fileextensions: ".jar"
    
    # Grader-specific properties
    # Properties (key/value pairs only) set here, will be forwarded to backend plugin 
    # before each grading process.
    # (These should be default values that may be overwritten by LMS in future.)
    # Optional.
    grader_plugin_defaults:
        db.databases: db1
        db1.connection.driver-class: org.postgresql.Driver
        db1.connection.url: jdbc:postgresql://172.17.0.1:5432/asqlg_grade
        db1.connection.username: asqlg_grade
        db1.connection.password: asqlg_grade
        db1.connection.type: PostgreSQL
        db1.uris: de.hsh.inform.hr.postgres:de.hsh.inform.moviedb.postgres:de.hsh.inform.hochschule.postgres
        statistic.storestatistic: true
        statisticdb.connection.driver-class: org.postgresql.Driver
        statisticdb.connection.url: jdbc:postgresql://172.17.0.1:5432/asqlg_statistic
        statisticdb.connection.username: asqlg_statistic
        statisticdb.connection.password: asqlg_statistic
        statisticdb.connection.type: PostgreSQL
        statisticdb.courseid: 1
      
    # Decides whether the grader will be run in host's JVM or within a docker-container.
    # Mandatory. Possible values: host_jvm_bp | docker_jvm_bp 
    #operating_mode: host_jvm_bp
    operating_mode: docker_jvm_bp

    # Additional preferences for running grader in host's JVM only
    # Optional.
    host_jvm_bp:
        # Semicolon separated absolute path(es) to files or directories that are to be 
        # loaded to the classpath when running on the host's JVM.
        # Optional. Default: (empty string)
        # hostonly_classpathes: "/usr/local/whatever/lib.jar"
        
        # Name of jar-file of the backend plugin below {graders_home}/{subdir}.
        # Optional. Default value: graderBP.jar
        plugin_jar_name: "asqlg-backend-plugin-2.0.0-jar-with-dependencies.jar"

    # Mandatory if 'operating_mode' was set to 'docker_jvm_bp'
    docker_jvm_bp:        
        # The Name of the docker image to create a container from. 
        # If image is not found locally, docker will search for remote one.
        # For registries different from local or DockerHub the general design of this name
        # is: registry:port/repo/image:tag
        # Mandatory.
        image_name: "grappa-backend-asqlg"
        # Username with readonly-access and password or PAT to retrieve a private image.
        # Optional.
        # Currently not used.
        #username:
        #password_pat:

# Defines classpath and classname for locally installed Docker proxy backend plugin,
# acting as a layer in between Grappa and the 'real' grader backend plugin that resides 
# within a Docker container. Every submission request is delegated to the real grader 
# plugin. This only needs to be defined if at least one grader uses grappa-backend-plugin-
# docker-proxy. It should be noted that it is not required to use the Docker proxy backend
# plugin if Docker is not intended to be used. In that case, choose 
# 'operating_mode: host_jvm_bp' for all graders.
docker_proxy:
    # The class path and name to the grappa-backendplugin-dockerproxy
    class_path: "/usr/local/graders/docker-proxy/grappa-backendplugin-dockerproxy.jar"
    # dot-style java-class fully qualified name of the grappa-backendplugin-dockerproxy
    class_name: "de.hsh.grappa.backendplugin.dockerproxy.DockerProxyBackendPlugin"
    # docker host uri (including port)
    host: "tcp://docker-daemon:2375"
    #host: "tcp://127.0.0.1:2375"

# Storage part
# Redis is used as a cache storage
# Redis should be configured so that the cache persists in spite of system
# and/or web service shutdowns and restarts
cache:

  # Submissions requested for grading by clients are instantly queued for
  # grading. After a submission has been graded, it is not instantly
  # removed. Instead, it remains in cache until its time runs out, at which
  # point it is permanently removed from the system.
  submission_ttl_seconds: 86400 # 1 day

  # The TTL of task objects  
  task_ttl_seconds: 2592000 # 30 days

  # The TTL of response (submission result) objects. It does not matter if
  # a response has been retrieved by the client at any point. Once the TTL
  # runs out, so does the response object.
  response_ttl_seconds: 2592000 # 30 days

  # Redis connection info
  redis:
    host: "redis"
    #host: "127.0.0.1"
    port: 6379
    password: "foobared"
